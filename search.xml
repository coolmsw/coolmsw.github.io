<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客搭建历程</title>
    <url>/2020/05/01/firststeps/</url>
    <content><![CDATA[<blockquote>
<p>折腾了差不多快一个星期了，总算把这个博客给鼓捣出来了，记录一下，帮助一下想要搭建的小伙伴！</p>
</blockquote>
<h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>本来早就打算自己搭建个博客了，一来可以记录学习中遇到的各种问题，以防忘记；二来可以督促自己该学习了，别特么一天到晚就知道瞎扯淡，否则啥时候能买得起一套房，怎么对得起一直陪自己吃苦的女友；三来还可以打发空闲时间，岂不快哉！所以，也就有了这个博客的诞生。<a id="more"></a></p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>虽然有了这个搭博客的想法，却一直纠结在博客页面布局上，我想要的是简洁，美观，高大上的类型，必须得自己搭建的博客。了解到现在的主流博客基本都是用Hexo、jekyll或者是express来搭建，或者借助于第三方的平台，比如CSDN，简书，头条等等。后来，偶然间在网上发现了一个博客，是用hexo+next搭建在github上的博客，满足了我的所有要求，简洁，炫酷，简直就是写博客的上选之作，于是，找了一些教程，说干就干…</p>
<h2 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h2><h3 id="搭建git环境"><a href="#搭建git环境" class="headerlink" title="搭建git环境"></a>搭建git环境</h3><blockquote>
<p>点击<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">这里</a>download下载，然后next,next,next…</p>
</blockquote>
<h3 id="hexo、next安装"><a href="#hexo、next安装" class="headerlink" title="hexo、next安装"></a>hexo、next安装</h3><blockquote>
<ul>
<li>打开Git Bash，全局安装hexo：<code>npm install -g hexo</code></li>
<li>定位到想要创建博客的路径上，运行命令：<code>hexo init</code>，创建搭建hexo博客需要的文件</li>
<li>安装npm依赖包：<code>npm install</code></li>
<li>从github上拉next到博客路径：<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>
<li>修改博客配置文件youbolg/_config.yml，找到 <strong><em>theme</em></strong> 字段，并将其值更改为 <strong><em>next</em></strong>，这样就把hexo的主题设置为next了</li>
<li>其他的基本设置请参考：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next官方文档</a></li>
</ul>
</blockquote>
<h3 id="优化主题"><a href="#优化主题" class="headerlink" title="优化主题"></a>优化主题</h3><blockquote>
<ul>
<li>增加文章阅读时长，字数统计显示<br>安装： <code>npm i --save hexo-wordcount</code><br>使用：搜索<strong><em>leancloud-visitors-count</em></strong> 放到下面:<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">    <span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>字数统计:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; wordcount(post.content) &#125;&#125;(字)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-time"</span>&gt;</span></span><br><span class="line">		<span class="symbol">&amp;nbsp;</span> | <span class="symbol">&amp;nbsp;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-icon"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-calendar-o"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>&gt;</span>阅读时长:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>&#123;&#123; min2read(post.content) &#125;&#125;(分)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h3 id="部署github"><a href="#部署github" class="headerlink" title="部署github"></a>部署github</h3><blockquote>
<ul>
<li>登录github、创建repo(注意注册的名字必须和repo名字相同)参考链接：<a href="https://www.cnblogs.com/keZhenxu94/p/5288488.html" target="_blank" rel="noopener">kezhenxue</a></li>
<li>获取并设置ssh key, 复制repo的https url复制到博客配置文件中：<br><code>deploy:
type: git
repository: https://github.com/fuey/fuey.github.io.git
branch: master</code></li>
<li>设置Git的username 和 email地址：<br><code>git config --global user.name &quot;xuhaiyan&quot;</code>、<code>git config --global user.email &quot;haiyan.xu.vip@gmail.com&quot;</code></li>
<li>检查ssh key，创建ssh key，设置ssh key</li>
</ul>
<ol>
<li>在bash中，检查是否已经存在了SSH keys:<code>ls -al ~/.ssh</code></li>
<li>如果存在，到C:\Users\用户名\.ssh路径下删除全部的文件</li>
<li>获取到ssh key：<code>ssh-keygen -t rsa -C &quot;youemailaddress@**.com&quot;</code>,然后到C:\Users\用户名\.ssh路径下看是否已经生成</li>
<li>生成的话直接执行：<code>clip &lt; ~/.ssh/id_rsa.pub</code>复制ssh key</li>
<li>然后到刚才创建的repo下，setting-&gt;SSH keys-&gt;add SSH key -&gt;填入title(随便填),key(直接Ctrl+v)。</li>
<li>测试配置是否正确:<code>ssh -T git@github.com</code>，输入yes，看到successful，那么恭喜你也有了一个炫酷的博客了！</li>
</ol>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><blockquote>
<p>hexo c      #相当于 hexo clean  清除缓存<br>hexo g      #相当于 hexo generate  生成解析过后的博客代码<br>hexo s      #相当于 hexo server  本地服务<br>hexo d      #相当于 hexo deploy  部署到设置的github或者coding</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next官方文档</a> | <a href="http://www.joryhe.com" target="_blank" rel="noopener">JORY’S BLOG</a> | <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo theme list</a>  | <a href="http://www.cnblogs.com/syd192/p/6074323.html" target="_blank" rel="noopener">cnblogs</a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>对2016年总结和感想</title>
    <url>/2020/05/01/my2016/</url>
    <content><![CDATA[<p>时间过得真的很快，转眼间，自己已经毕业将近一年了。对了，顾着写博客貌似忘了自我介绍，博主来自贵州一个不太知名的小山村，12年考上了贵阳某二本院校，计算机科学与技术专业，虽然心有不甘，但还是撑到了毕业的那天。幸运的是在大学遇到了我的一生挚爱，也就是现在的女朋友，将来的伴侣，还有一群趣(chou)味相投的小伙伴<a id="more"></a>,虽然毕业之后都各奔东西，但是总有相遇的那一天，然后一起干一番(da)事(mei)业(zi)…咳咳，扯远了，毕业之后，父母建议考公务员或者事业单位，混几年，娶个老婆、生个娃，然后安安稳稳过一生，说句实话，我也确实心动过，想想就觉得开心：每天蹲办公室，喝着茶，看着报纸，年复一年，日复一日，小生活就这么过着，多好…可是，博主是个装逼的人，我的人生不该这么过，就该过当上总经理，出任ceo，迎娶白富美这种丰富多彩的生活，所以，博主(知道自己考不上)毅然决定，留在贵阳，继续干码农。<br>博主第一家公司在世纪城，回想起来，一把辛酸一把泪(苦逼脸)，单休，基本天天加班，真是干码农的标准配置，有时候凌晨一二点通过漆黑的街道也曾怀疑过人生，动摇过自己的初心，不过，年轻嘛，多经历点也不是什么坏事，博主也算是体验到了当码农的艰辛，由于公司是创业公司，其实这种情况也不奇怪，刚进公司那会儿，被叔(项目经理，咱公司都这么叫,习惯了)安排负责公司内部使用的管理系统的开发，看到项目架构，简直是一脸懵比，各种陌生的名词:dubbo、redis、druid、zookeeper、ecache…这都是些什么鬼，玩毛线，不过，老板给你开了工资，你敢不干？于是，就只能硬着头皮冲了，所幸的是，在做项目的过程中遇到了很多问题，问部门的同事，他们都很细心的给我讲，在这表示感谢(害羞…)。经过差不多半年的连滚带爬，自己确实学到了不少东西，平时工作除了干我后台的东西，也写过一些微信公众号的接口，并且喜欢上了这种只用写后台逻辑的感觉，就觉得，不用写jsp页面，真尼玛爽。<br>时间在执行公司各种政策下快速流逝，转眼到了年末。公司举行了对博主来说很隆重的年会，大家都很开心！不过，世事无常，下一秒会发生啥，谁也说不准。差不多到过年的前几天的某一天，博主有点事，上完上午就请假了，大概在下午4，5点的时候陆续收到部门小伙伴发来的微信，qq，短信，甚至是电话说公司把研发部解散了，我开始还不太相信，觉得这群傻逼，骗谁呢，怎么可能嘛，研发在公司处于举足轻重的地位，怎么可能会解散，就当玩笑听过去了。博主6点左右回到家，老鹰(安卓扛把子)打电话来说，叫我过去吃顿散伙饭，说研发解散了，解散了，解散…我真的没有听错，确实说得是解散了，吃散伙饭。我一阵懵比，就想着过去见他们一面，问清楚到底发生了什么，我就请了一个下午，发生了这么大的事…上午还在的研发部，下午就不在了。后来，知道了，这仅仅只是公司的一个战略部署的一个部分而已，紧接着是裁员，100多号人的公司，差不多最后只剩一半不到！当时就觉得心里挺不是滋味的，好好的部门说没了就没了，辛辛苦苦一起做的项目就这么拱手让人了，心里真不爽。不过，那又有什么办法，自己只是一个小员工，根本不值得一提，想着，如果自己那时候技术和能力很牛逼，事情会不会发生一点点改变，偏向博主这边的一点点的改变，只能怪自己技术真的不行，无法达到那种程度，所以还得继续努力，不会让这种事再次发生在自己身上(叔，花姐，小龚，小明，小伟哥，小稍匕，小杜儿，潘潘，李洋，老鹰，安好，咱还会见面的….)。<br>年后，经过小明的内推，进了一家外企，也就是现在呆的公司。博主要努力，努力，再努力，达到自己期望的高度。所以，今年搭了博客，开始了自己的规划，加油！故，共勉!</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>git常用命令</title>
    <url>/2020/05/01/git/gitCmd/</url>
    <content><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><blockquote>
<p>好不容易搭好的博客，前几次改了几个文件，差点GG，所以为了以防不测，故上传github，备份之!<a id="more"></a></p>
</blockquote>
<ul>
<li><code>touch README.md</code> 创建并添加一个名字为readme.md的文件</li>
<li><code>git init</code> 初始化git仓库</li>
<li><code>git add README.MD</code> 添加一个文件到本地仓库，用于之后的提交(只有在本地代码库里面的代码才能够提交到git的远程仓库上去)</li>
<li><code>git add .</code> 添加当前路径下的所有文件到本地仓库(注意那个.与add中间有一个空格)</li>
<li><code>git commit -m &quot;notes&quot;</code> 为本次提交加注释(即本次提交的代码主要简介)</li>
<li><code>git remote add origin https://github.com/***/***.git</code> 创建远程仓库，并为仓库命名,<strong>origin</strong>为仓库的别名(origin则设为默认主机)，用于将来引用,此处的<strong>url</strong>为git上事先创建好的url地址</li>
<li><code>git push -u origin master</code> 本地的master分支推送到origin主机的master分支</li>
<li><code>git pull --rebase origin master</code> 代码合并</li>
<li><code>git config --global --unset http.proxy</code> （出现这个错误时：<code>fatal: unable to access &#39;https://github.com/fuey/blog-code-backups.git/&#39;: Couldn&#39;t resolve host &#39;github.com&#39;</code>，然后再提交就行了）</li>
</ul>
<h2 id="提交分支一般步骤"><a href="#提交分支一般步骤" class="headerlink" title="提交分支一般步骤"></a>提交分支一般步骤</h2><ul>
<li><code>git add .</code>、<code>git commit -m &quot;notes&quot;</code>、<code>git remote add origin https://github.com/***/***.git</code>、 <code>git pull --rebase origin master</code>、<code>git push -u origin master</code>，顺序执行即可</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>单节点Nginx环境搭建</title>
    <url>/2017/04/16/technology/nginx/%E5%8D%95%E8%8A%82%E7%82%B9nginx%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>　　上星期，由于工作需要，要搭建一个nginx服务器用于公司业务系统的反向代理，大概了解了一下，就动手搭建了一下，顺便出一个教程，方便新(zi)手(ji)查阅<a id="more"></a></p>
<h4 id="一、安装Nginx"><a href="#一、安装Nginx" class="headerlink" title="一、安装Nginx"></a>一、安装Nginx</h4><ol>
<li>点击<a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">这里</a>，下载安装最新版本Nginx,并解压安装包：<code>tar -zxvf nginx-xxxx.tar.gz</code></li>
<li>安装Nginx编译必须的lib包，pcre、zlib和OpenSSL：<br> <code>yum -y install pcre-devel</code><br> <code>yum install openssl openssl-devel</code><br> <code>yum install -y zlib-devel</code></li>
<li>检查Nginx必须的lib是否已经有了：<code>./configure --with-http_ssl_module</code>，若出现以下内容则表示lib已经安装<br><img src="http://i1.piimg.com/591560/4716d3856ba6e9f4.png" alt="xx"></li>
<li>定位到nginx目录，运行<code>make</code>命令进行编译，然后切换到root权限，到nginx目录执行<code>make install</code>命令进行安装</li>
<li>定位到安装路径下：<code>/usr/local/nginx/sbin</code>，运行命令<code>./nginx</code>，在浏览器中输入阿里云的host地址，如果出现下图类似内容，则安装成功<br><img src="http://i1.piimg.com/591560/af24b8e898055aed.png" alt="xx"></li>
</ol>
<h3 id="二、配置nginx配置文件"><a href="#二、配置nginx配置文件" class="headerlink" title="二、配置nginx配置文件"></a>二、配置nginx配置文件</h3><ol>
<li>将证书和key放在<em>/usr/local/nginx/conf</em>目录下，下面备用</li>
<li>打开并下载路径<em>/usr/local/nginx/conf</em>下的<strong><em>nginx.conf</em></strong>文件：<br>　　1. 将<strong><em>worker_processes</em></strong>(允许生成的进程数)、<strong><em>worker_connections </em></strong>(最大连接数)设置大点<br>　　2. 配置代理服务器，在此均使用单节点的方式进行:<pre><code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">upstream myappServer&#123;</span><br><span class="line">	server localhost:8001;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ol>
<p>以此类推，配置多个系统<br>　　3. 配置server模块：<br>        <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">client_max_body_size 500M;   --上传文件限制大小</span><br><span class="line">listen       80 default backlog=2048; --监听端口</span><br><span class="line">listen 443 ssl; --ssl加密传输接口</span><br><span class="line">server_name  localhost; </span><br><span class="line">ssl_certificate      /usr/local/nginx/conf/server.crt; --ssl证书</span><br><span class="line">ssl_certificate_key  /usr/local/nginx/conf/server.key; --ssl key</span><br><span class="line"></span><br><span class="line">proxy_set_header       Host $host;  --主域名</span><br><span class="line">proxy_set_header  X-Real-IP  $remote_addr; --真实地址</span><br><span class="line">proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header X-Forwarded-Proto  $scheme;</span><br></pre></td></tr></table></figure></p>
<pre><code>4. 匹配规则：
    <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">location /myapp/ &#123;   --匹配规则为*/mychs/*的地址请求</span><br><span class="line">	proxy_pass http://mychsServer/myapp/; -- mychsServer对应上面的myServer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre><ol start="3">
<li>保存，定位到<strong><em>sbin</em></strong>目录下,运行命令<code>./nginx -s reload</code>即可重新加载nginx配置文件</li>
</ol>
<h3 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h3><p>启动 Nginx：<code>sudo ./sbin/nginx</code><br>停止 Nginx：<code>sudo ./sbin/nginx -s stop</code>或<code>sudo ./sbin/nginx -s quit</code><br>Nginx 重载配置: <code>sudo ./sbin/nginx -s reload</code><br>查看配置文件是否正确: <code>./sbin/nginx –t</code><br>强制停止: <code>pkill -9 nginx</code></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>第 2 章 计算机组成原理与体系结构</title>
    <url>/2017/04/18/softwaretest/%E7%AC%AC%202%20%E7%AB%A0%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/first/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　提起软考，都是泪啊，这算是第三次考了，第一、二次考试都是在大学的时候考的，第一次下午题差３分，差点没把我气吐血，第二次由于没咋看书，简直惨不忍睹，刚毕业出来，学校的一些知识还没忘光，还是打算把这证给考了，爷就不信了．．．．话不多说，开始作死模式．．．<a id="more"></a></p>
<h2 id="数据的表示"><a href="#数据的表示" class="headerlink" title="数据的表示"></a>数据的表示</h2><h3 id="进制转化"><a href="#进制转化" class="headerlink" title="进制转化"></a>进制转化</h3><ul>
<li>R进制转十进制：101001.010 -&gt; 1<em>2^5+1</em>2^3+1*2^-2</li>
<li>十进制转R进制：十进制数除以R，反向取余</li>
<li>二进制转八进制：从右边开始，每三位二进制位按照421乘以二进制数相加即可，比如，1011-&gt;1<em>1 2</em>2+1*1= 15</li>
<li>二进制转十六进制：从右边开始，每三位二进制位按照8421乘以二进制数相加即可，比如，101011 -&gt;2B<h3 id="码制"><a href="#码制" class="headerlink" title="码制"></a>码制</h3></li>
<li>原码：把一个数转为二进制，并把最高位设为符号位，不足七位用0补全，即，1的原码为0000 0001，-1为1000 0001</li>
<li>反码：整数的原码与反码相同，负数的原码除符号位外，其他位按位取反，即，1的反码为0000 0001，-1为1111 1110</li>
<li>补码：整数的补码与反码相同，负数为反码+1,即，1的补码为0000 0001，-1为1111 1111</li>
<li>移码：补码的符号位取反，即，1的补码为1000 0001，-1为0111 1111，通常用来表示浮点数的阶码<h3 id="数值表示范围"><a href="#数值表示范围" class="headerlink" title="数值表示范围"></a>数值表示范围</h3>由于补码的+0和-0相同，所以比原码和反码多一位<br><img src="http://i2.muimg.com/591560/2356ce58761bd50b.png" alt="范围"><h3 id="浮点数表示"><a href="#浮点数表示" class="headerlink" title="浮点数表示"></a>浮点数表示</h3>浮点数是指通过科学记数法表示的数，通常，表示为N=M<em>R^e,则M为尾数，e为指数，R为基数<br>浮点数之间的运算，通常要经过对阶-&gt;尾数计算-&gt;结果格式化的过程,对价时，通常由低向高对价，比如：2.34</em>10^5 + 1.04<em>10^6<br>对阶后：0.234</em>10^6 + 1.04<em>10^6 = 1.274</em>10^6<br>其中，结果格式化表示尾数的第一位必须为不为零且之后必须为小数点(即不能为0.11或11.2)<h2 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h2><h3 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h3>计算机由cpu（运算器，控制器）、存储器、输入设备、输出设备组成<br>运算器：算术逻辑单元（ALU），累加寄存器（AC）、数据缓冲寄存器（DR）、状态条件寄存器（PSW）<br>控制器：程序计数器（PC）、指令寄存器（IR）、指令译码器、时序部件<h3 id="计算机体系结构分类"><a href="#计算机体系结构分类" class="headerlink" title="计算机体系结构分类"></a>计算机体系结构分类</h3><img src="http://i4.buimg.com/591560/dbebe915d26826d2.png" alt="flynn分类法"><h3 id="CISC和RISC"><a href="#CISC和RISC" class="headerlink" title="CISC和RISC"></a>CISC和RISC</h3>CISC:复杂指令集计算机(提高效率)<br>RISC:精简指令集计算机（提高性能）<br><img src="http://i2.muimg.com/591560/1be830fa4d71f3dd.png" alt="CISC和RISC"></li>
</ul>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
        <tag>计算机组成原理与体系结构</tag>
      </tags>
  </entry>
</search>
